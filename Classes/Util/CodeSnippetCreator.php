<?php

declare(strict_types=1);

/*
 * This file is part of the TYPO3 CMS project.
 *
 * It is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License, either version 2
 * of the License, or any later version.
 *
 * For the full copyright and license information, please read the
 * LICENSE.txt file that was distributed with this source code.
 *
 * The TYPO3 project - inspiring people to share!
 */

namespace T3docs\Codesnippet\Util;

/*
 * This file is part of the TYPO3 project.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * The TYPO3 project - inspiring people to share!
 */

use T3docs\Codesnippet\Renderer\RendererInterface;
use TYPO3\CMS\Core\Utility\GeneralUtility;
use T3docs\Codesnippet\Exceptions\InvalidConfigurationException;

class CodeSnippetCreator
{
    public const RECURSIVE_PATH = 1;
    public const FLAT_PATH = 1;

    private static $fileCount = 0;
    private static $configPath = '';

    /**
     * @var iterable|RendererInterface[]
     */
    private readonly iterable $codeSnippetRenderers;

    public function __construct(iterable $codeSnippetRenderers)
    {
        $this->codeSnippetRenderers = $codeSnippetRenderers;
    }

    public function run(array $config, string $configPath): void
    {
        self::$configPath =  $configPath;
        self::$fileCount = 0;

        foreach ($config as $entry) {
            if (is_array($entry) && isset($entry['action'])) {
                $codeSnippetRenderer = $this->getCodeSnippetRenderer($entry);
                if (!$codeSnippetRenderer instanceof RendererInterface) {
                    continue;
                }

                static::writeFile(
                    $entry,
                    $codeSnippetRenderer->render($entry)
                );
            }
        }
        echo self::$fileCount . ' Files created or overridden.' . "\n";
    }

    private function getCodeSnippetRenderer(array $config): ?RendererInterface
    {
        foreach ($this->codeSnippetRenderers as $codeSnippetRenderer) {
            if ($codeSnippetRenderer->canRender($config)) {
                return $codeSnippetRenderer;
            }
        }

        return null;
    }

    public static function writeSimpleFile($content, $path): void
    {
        if (!$path) {
            throw new InvalidConfigurationException('No path given.');
        }
        if (!$content) {
            throw new InvalidConfigurationException('No content found for file  ' . $path);
        }
        $filename = self::$configPath . '/' . $path;
        mkdir(dirname($filename), 0755, true);
        GeneralUtility::writeFile(
            $filename,
            $content,
        );
    }

    public static function writeFile(array $entry, String $content, String $rstContent = '', $overwriteRst = false, String $indexContent = '', $overwriteIndex = false): void
    {
        $content = '..  Generated by https://github.com/TYPO3-Documentation/t3docs-codesnippets' . LF . $content;

        if (!$entry['targetFileName']) {
            throw new InvalidConfigurationException('targetFileName not set for action ' . $entry['action']);
        }
        if (!$content) {
            throw new InvalidConfigurationException('No content found for file ' . $entry['targetFileName']);
        }

        // Remove trailing whitespace from lines and ensure no empty lines with only whitespace
        $content = preg_replace("/[ \t]+$/m", '', $content); // Removes trailing spaces and tabs from each line

        // Remove consecutive empty lines with or without whitespace
        $content = preg_replace("/\n{2,}/", "\n\n", $content);

        // Ensure content ends with exactly one empty line
        $content = trim($content) . "\n";

        $filename = self::$configPath . '/' . $entry['targetFileName'];
        if (!file_exists(dirname($filename))) {
            mkdir(dirname($filename), 0755, true);
        }

        GeneralUtility::writeFile(
            $filename,
            $content,
        );

        if ($rstContent && $entry['rstFileName']) {
            $rstFilename = self::$configPath . '/' . $entry['rstFileName'];
            mkdir(dirname($rstFilename), 0755, true);
            GeneralUtility::writeFile(
                $filename,
                $content,
            );
            if ($overwriteRst || !file_exists($rstFilename)) {
                GeneralUtility::writeFile($rstFilename, $rstContent);
            }
            if ($indexContent) {
                $indexFile = dirname($rstFilename) . '/Index.rst';
                if ($overwriteIndex || !file_exists($indexFile)) {
                    GeneralUtility::writeFile($indexFile, $indexContent);
                }
            }
        }
        self::$fileCount++;
    }
}
